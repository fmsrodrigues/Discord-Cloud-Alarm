import { SNSEvent } from 'aws-lambda';
import got from "got";

import { buildDiscordMessage, handler, isSNSMessageAlarm } from './index';

jest.mock("got");

let event: SNSEvent;
let unknownSNSEvent: SNSEvent;
let snsMessage: { [key: string]: any };

describe("AWS Lambda Handler", () => {
  beforeEach(() => {
    event = {
      Records: [
        {
          EventSource: "aws:sns",
          EventVersion: "1.0",
          EventSubscriptionArn: "arn:aws:sns:us-east-1:{{{accountId}}}:ExampleTopic",
          Sns: {
            Type: "Notification",
            MessageId: "95df01b4-ee98-5cb9-9103-4c221d41eb2e",
            TopicArn: "arn:aws:sns:us-east-1:123456789012:ExampleTopic",
            Subject: "example subject",
            Message: JSON.stringify({ 
              Trigger: {
                Namespace:"AWS/Lambda",
                Dimensions: [{
                  key:"cloudwatch-discord-alarm-lambda",
                  value:"cloudwatch-discord-alarm-lambda"
                }],
                MetricName:"Errors"
              },
              AlarmName:"cloudwatch-discord-alarm-lambda",
              AlarmDescription:"This is a message generated by JEST",
              OldStateValue:"Good",
              NewStateReason:"Bad"
            }),
            Timestamp: "1970-01-01T00:00:00.000Z",
            SignatureVersion: "1",
            Signature: "EXAMPLE",
            SigningCertUrl: "EXAMPLE",
            UnsubscribeUrl: "EXAMPLE",
            MessageAttributes: {
              Test: {
                Type: "String",
                Value: "TestString"
              },
              TestBinary: {
                Type: "Binary",
                Value: "TestBinary"
              }
            }
          }
        }
      ]
    };
  
    unknownSNSEvent = {
      Records: [
        {
          EventSource: "aws:sns",
          EventVersion: "1.0",
          EventSubscriptionArn: "arn:aws:sns:us-east-1:{{{accountId}}}:ExampleTopic",
          Sns: {
            Type: "Notification",
            MessageId: "95df01b4-ee98-5cb9-9901-4c221d41eb2e",
            TopicArn: "arn:aws:sns:us-east-1:123456789012:ExampleTopic",
            Subject: "example subject",
            Message: JSON.stringify({ 
              Trigger: {
                Namespace:"Random Place",
                Dimensions: [{
                  key:"random-alarm-lambda",
                  value:"random-alarm-lambda"
                }],
                MetricName:"Errors"
              },
              AlarmName:"random-alarm-lambda",
              AlarmDescription:"This is a message generated by JEST",
              someNewField:"",
              anotherNewField:"Unknown",
            }),
            Timestamp: "1970-01-01T00:00:00.000Z",
            SignatureVersion: "1",
            Signature: "EXAMPLE",
            SigningCertUrl: "EXAMPLE",
            UnsubscribeUrl: "EXAMPLE",
            MessageAttributes: {
              Test: {
                Type: "String",
                Value: "TestString"
              },
              TestBinary: {
                Type: "Binary",
                Value: "TestBinary"
              }
            }
          }
        }
      ]
    };
  
    snsMessage = JSON.parse(event.Records[0].Sns.Message);
  });

  it("should send an SNS event discord message successfully", async () => {
    jest.spyOn(got, 'post').mockResolvedValue({ statusCode: 204, body: undefined });

    const res = await handler(event);

    expect(res.statusCode).toBe(200);
  });

  it("should send a Random error event discord message successfully", async () => {
    jest.spyOn(got, 'post').mockResolvedValue({ statusCode: 204, body: undefined });

    const res = await handler(unknownSNSEvent);

    expect(res.statusCode).toBe(200);
  });

  describe("isSNSMessageAlarm", () => {
    it("should return true if the message Namespace is AWS/Lambda", () => {
      const isAlarm = isSNSMessageAlarm(snsMessage);
  
      expect(isAlarm).toBe(true);
    });
  
    it("should return false if the message Namespace is not AWS/Lambda", () => {
      const modifiedMessage = { ...snsMessage, Trigger: { ...snsMessage.Trigger } };
      modifiedMessage.Trigger.Namespace = "Some error";
  
      const isAlarm = isSNSMessageAlarm(modifiedMessage);
  
      expect(isAlarm).toBe(false);
    });
  });

  describe("buildDiscordMessage", () => {
    it("should return a detailed discord message", () => {
      const discordMessages = buildDiscordMessage({ snsMessage, from: "AWS/Lambda" });
  
      expect(discordMessages).toHaveLength(6);
    });
  
    it("should return a single discord message when 'from' is not set and parsed message has less than 2000 characters", () => {
      const discordMessages = buildDiscordMessage({ snsMessage });
  
      expect(discordMessages).toHaveLength(1);
    });
  
    it("should return the snsMessage values when the field is set", () => {
      const discordMessages = buildDiscordMessage({ snsMessage, from: "AWS/Lambda" });
  
      expect(discordMessages[0].value).toBe(snsMessage.Trigger.Dimensions[0].value);
      expect(discordMessages[1].value).toBe(snsMessage.AlarmName);
      expect(discordMessages[2].value).toBe(snsMessage.AlarmDescription);
      expect(discordMessages[3].value).toBe(snsMessage.OldStateValue);
      expect(discordMessages[4].value).toBe(snsMessage.Trigger.MetricName);
      expect(discordMessages[5].value).toBe(snsMessage.NewStateReason);
    });
  
    it("should return 'Not Defined' when the field is not set", () => {
      const modifiedSnsMessage = {
        prop1: "a",
        prop2: "a",
        prop3: "a",
      }
  
      const discordMessages = buildDiscordMessage({ snsMessage: modifiedSnsMessage, from: "AWS/Lambda" });
      
      expect(discordMessages[0].value).toBe("Not Defined");
      expect(discordMessages[1].value).toBe("Not Defined");
      expect(discordMessages[2].value).toBe("Not Defined");
      expect(discordMessages[3].value).toBe("Not Defined");
      expect(discordMessages[4].value).toBe("Not Defined");
      expect(discordMessages[5].value).toBe("Not Defined");
    });
  });
});